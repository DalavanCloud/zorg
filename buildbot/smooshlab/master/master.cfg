# -*- python -*-

"""
Top level build bot configuration file.
"""

# Expect llvm_zorg to be checked out at the top level.
import os, sys
path = os.path.join(os.environ.get('HOME'), 'llvm_zorg', 'buildbot')
if path not in sys.path:
  sys.path.append(path)
path = os.path.join(os.environ.get('HOME'), 'llvm_zorg')
if path not in sys.path:
  sys.path.append(path)

import zorg
import zorg.buildbot
import smooshlab

Config = smooshlab.Config

import buildbot

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
  buildbot.buildslave.BuildSlave("giles", "password", 
                                 properties = { 'jobs' : 2 },
                                 max_builds = 3),
  ]

# The port that slaves will connect on.
c['slavePortnum'] = Config.getBuildmasterPort()

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

import os
kStableTimeout = 2 * 60

import buildbot.changes.pb
import buildbot.changes.svnpoller

c['change_source'] = [buildbot.changes.pb.PBChangeSource()]
if Config.shouldTrackChanges():
  if Config.shouldTrackLLVM():
    c['change_source'].append(buildbot.changes.svnpoller.SVNPoller("http://llvm.org/svn/llvm-project/llvm/trunk",
                                                                   pollinterval=300, histmax=10))
  if Config.shouldTrackClang():
    c['change_source'].append(buildbot.changes.svnpoller.SVNPoller("http://llvm.org/svn/llvm-project/cfe/trunk",
                                                                   pollinterval=300, histmax=10))
  if Config.shouldTrackLLVMGCC():
    c['change_source'].append(buildbot.changes.svnpoller.SVNPoller("http://llvm.org/svn/llvm-project/llvm-gcc-4.2/trunk",
                                                                   pollinterval=300, histmax=10))

####### SCHEDULERS

## configure the Schedulers

from buildbot import scheduler

llvmSched = buildbot.scheduler.Scheduler(name="llvm", branch=None,
                                         treeStableTimer=kStableTimeout,
                                         builderNames=["clang-x86_64-darwin10"],
                                         properties={})

c['schedulers'] = [llvmSched]
  
####### BUILDERS

from zorg.buildbot.builders import ClangBuilder, LLVMGCCBuilder, NightlytestBuilder

c['builders'] = []
c['builders'].append({ 'slavenames' : ['giles'],
                       'name' : "clang-x86_64-darwin10",
                       'builddir' : "clang-x86_64-darwin10",
                       'factory' : ClangBuilder.getClangBuildFactory('x86_64-apple-darwin10')})

c['builders'].append({ 'slavenames' : ['giles'],
                       'name' : "llvmgcc-i686-darwin10",
                       'builddir' : "llvmgcc-i686-darwin10",
                       'factory' : LLVMGCCBuilder.getLLVMGCCBuildFactory(16,
                                                                         triple='i686-apple-darwin10',
                                                                         gxxincludedir='/usr/include/c++/4.2.1',
                                                                         useTwoStage=False)})

c['builders'].append({ 'slavenames' : ['giles'],
                       'name' : "llvmgcc-x86_64-darwin10-selfhost",
                       'builddir' : "llvmgcc-x86_64-darwin10-selfhost",
                       'factory' : LLVMGCCBuilder.getLLVMGCCBuildFactory(16,
                                                                         triple='x86_64-apple-darwin10',
                                                                         gxxincludedir='/usr/include/c++/4.2.1')})

c['builders'].append({ 'slavenames' : ['giles'],
                       'name' : "nnt",
                       'builddir' : "nnt",
                       'factory' : NightlytestBuilder.getNightlytestBuildFactory()})

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=Config.getBuildmasterWebPort(), 
                                  allowForce=True))

from buildbot.status import mail
useMail = False
if useMail and False:
  c['status'].append(mail.MailNotifier(fromaddr="daniel@zuster.org",
                                       mode="all",
                                       extraRecipients=["daniel@zuster.org"],
                                       sendToInterestedUsers=False,
                                       relayhost="relay.apple.com"))

if False:
  from buildbot.status import words
  irc = words.IRC("irc.oftc.net", "smooshlab",
                  port=6668,
                  channels=["llvm"],
                  allowForce=False,
                  password="password")
  c['status'].append(irc)

####### PROJECT IDENTITY

# Buildbot title.
c['projectName'] = Config.getBuildbotName()
c['projectURL'] = 'http://%s/' % (Config.getBuildmasterHost(),)

# External url to buildbot webserver.
c['buildbotURL'] = "http://%s:%d/" % (Config.getBuildmasterHost(),
                                      Config.getBuildmasterWebPort())
