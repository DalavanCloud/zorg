1# -*- python -*-
# ex: set syntax=python:

# Extend paths to allow loading zorg and config modules.
import os, sys
path = os.path.join(os.environ.get('HOME'), 'zorg', 'buildbot', 'klee', 'master')
if path not in sys.path:
  sys.path.append(path)
path = os.path.join(os.environ.get('HOME'), 'zorg')
if path not in sys.path:
  sys.path.append(path)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

import config

# Reload stuff automatically.
#
# FIXME: Find better way.
reload(config.slaves)
reload(config.builders)
reload(config.status)
reload(config)

import config

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.
c['db_url'] = "sqlite:///state.sqlite"

####### BUILDSLAVES

c['slaves'] = config.slaves.get_build_slaves()
c['slavePortnum'] = 9990

####### CHANGESOURCES

from buildbot.changes.svnpoller import SVNPoller
from buildbot.changes.pb import PBChangeSource

import buildbot.changes.svnpoller

class LLVMPoller(buildbot.changes.svnpoller.SVNPoller):
  def __init__(self, project, pollinterval=120, histmax=10):
    buildbot.changes.svnpoller.SVNPoller.__init__(self, 
                                                  'http://llvm.org/svn/llvm-project/%s' % project,
                                                  pollinterval=pollinterval,
                                                  histmax=histmax,
                                                  revlinktmpl='http://llvm.org/viewvc/llvm-project/?view=rev&revision=%s')
c['change_source'] = [PBChangeSource()]
if True:
  c['change_source'].append(LLVMPoller("klee/trunk"))

####### BUILDERS

c['builders'] = builders = list(config.builders.get_builders())

####### STATUS TARGETS

# Schedule builds and email for all non-experimental builders.
standard_builders = [b['name'] for b in builders
                     if not b['category'].endswith('.exp')]
c['status'] = config.status.get_status_targets(standard_builders)

####### RESOURCE USAGE

# Number of build records to maintain per builder.
c['buildHorizon'] = 1000

# Number of logs to maintain per builder.
c['logHorizon'] = 100

# Number of events (connect, disconnect, etc.) to maintain.
c['eventHorizon'] = 100

# Number of builds to cache in memory.
c['buildCacheSize'] = 1000

####### SCHEDULERS

from buildbot.scheduler import Scheduler
c['schedulers'] = [Scheduler(name="all",branch=None,
                             treeStableTimer=2*60,
                             builderNames=standard_builders)]

####### PROJECT IDENTITY

c['projectName'] = "klee"
c['projectURL'] = "http://klee.llvm.org/"
c['buildbotURL'] = "http://klee.minormatter.com:8010/"

####### DEBUGGING OPTIONS

# If you set 'debugPassword', then you can connect to the buildmaster
# with the diagnostic tool in contrib/debugclient.py . From this tool,
# you can manually force builds and inject changes, which may be
# useful for testing your buildmaster without actually commiting
# changes to your repository (or before you have a functioning
# 'sources' set up). The debug tool uses the same port number as the
# slaves do: 'slavePortnum'.
c['debugPassword'] = config.options.get('Master Options', 'debug_password')

# If you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You
# can also use an authorized_keys file, or plain telnet.
if config.options.getboolean('Master Options', 'enable_manhole'):
  from buildbot import manhole
  c['manhole'] = manhole.PasswordManhole(config.options.get('Master Options', 'manhole_port'),
                                         config.options.get('Master Options', 'manhole_user'),
                                         config.options.get('Master Options', 'manhole_password'))

# from buildbot.scheduler import Try_Userpass
# s = Try_Userpass("try", ["llvm-x86_64-linux"], port=8032,
#                  userpass=[("llvmpatch","patchtest")] )
# c['schedulers'].append(s)
