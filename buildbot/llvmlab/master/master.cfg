# -*- python -*-
# ex: set syntax=python:

"""
Top level build bot configuration file.
"""

# Expect llvm_zorg to be checked out at the top level.
import os, sys
path = os.path.join(os.environ.get('HOME'), 'llvm_zorg', 'buildbot')
if path not in sys.path:
  sys.path.append(path)
path = os.path.join(os.environ.get('HOME'), 'llvm_zorg')
if path not in sys.path:
  sys.path.append(path)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

import config
import config.schedulers

# Reload stuff automatically.
#
# FIXME: Find better way.
reload(config.slaves)
reload(config.schedulers)
reload(config.builders)
reload(config.status)
reload(config)
import config

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.
c['db_url'] = "sqlite:///state.sqlite"

####### BUILDSLAVES

c['slaves'] = list(config.slaves.get_build_slaves())
c['slavePortnum'] = 9994

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

import os
kStableTimeout = 2 * 60

import buildbot.changes.svnpoller
from buildbot.changes.pb import PBChangeSource

class LLVMPoller(buildbot.changes.svnpoller.SVNPoller):
  def __init__(self, project, pollinterval=120, histmax=10):
    buildbot.changes.svnpoller.SVNPoller.__init__(self, 
    											  project=project,
                                                  svnurl='http://llvm.org/svn/llvm-project/%s/trunk' % project,
                                                  pollinterval=pollinterval,
                                                  histmax=histmax,
                                                  revlinktmpl='http://llvm.org/viewvc/llvm-project/?view=rev&revision=%s')
c['change_source'] = []
if True:
  c['change_source'].append(LLVMPoller("llvm"))
  c['change_source'].append(LLVMPoller("cfe"))
#  c['change_source'].append(LLVMPoller("llvm-gcc-4.2/trunk"))
  c['change_source'].append(LLVMPoller("test-suite"))

####### BUILDERS

slaves_name = [s.slavename for s in c['slaves']]
c['builders'] = builders = list(config.builders.get_builders(slaves_name) )

####### STATUS TARGETS

# Schedule builds and email for all non-experimental builders.
standard_builders = [b['name'] for b in builders
                     if not b['category'].endswith('.exp')]
c['status'] = config.status.get_status_targets(standard_builders)

####### RESOURCE USAGE

# Number of build records to maintain per builder.
c['buildHorizon'] = 4000

# Number of logs to maintain per builder.
c['logHorizon'] = 600

# Number of events (connect, disconnect, etc.) to maintain.
c['eventHorizon'] = 100

# Number of builds to cache in memory.
c['buildCacheSize'] = 500

####### SCHEDULERS

c['schedulers'] = schedulers = list(config.schedulers.get_schedulers())

####### PROJECT IDENTITY

c['projectName'] = "lab.llvm.org"
c['projectURL'] = "http://lab.llvm.org/"
c['buildbotURL'] = "http://lab.llvm.org:8013/"

