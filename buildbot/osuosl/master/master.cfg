# -*- python -*-
# ex: set syntax=python:

# Extend paths to allow loading zorg and config modules.
import os, sys
path = os.path.join(os.environ.get('HOME'), 'zorg', 'buildbot', 'osuosl', 'master')
if path not in sys.path:
  sys.path.append(path)
path = os.path.join(os.environ.get('HOME'), 'zorg')
if path not in sys.path:
  sys.path.append(path)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

import config

# Reload stuff automatically.
#
# FIXME: Find better way.
reload(config.slaves)
reload(config.builders)
reload(config.status)
reload(config)

####### BUILDSLAVES

c['slaves'] = config.slaves.get_build_slaves()
c['slavePortnum'] = 9990

####### CHANGESOURCES

from buildbot.changes.svnpoller import SVNPoller
from buildbot.changes.pb import PBChangeSource

import buildbot.changes.svnpoller

class LLVMPoller(buildbot.changes.svnpoller.SVNPoller):
  def __init__(self, project, pollinterval=120, histmax=10):
    buildbot.changes.svnpoller.SVNPoller.__init__(self, 
                                                  'http://llvm.org/svn/llvm-project/%s' % project,
                                                  pollinterval=pollinterval,
                                                  histmax=histmax,
                                                  revlinktmpl='http://llvm.org/viewvc/llvm-project/?view=rev&revision=%s')
c['change_source'] = [PBChangeSource()]
if True:
  c['change_source'].append(LLVMPoller("llvm/trunk"))
  c['change_source'].append(LLVMPoller("cfe/trunk"))
  c['change_source'].append(LLVMPoller("polly/trunk"))
  c['change_source'].append(LLVMPoller("llvm-gcc-4.2/trunk"))
  c['change_source'].append(LLVMPoller("compiler-rt/trunk"))
  c['change_source'].append(LLVMPoller("dragonegg/trunk"))
  c['change_source'].append(LLVMPoller("lldb/trunk"))
#  c['change_source'].append(LLVMPoller("test-suite/trunk"))

####### BUILDERS

c['builders'] = builders = list(config.builders.get_builders())

####### STATUS TARGETS

# Schedule builds and email for all non-experimental builders.
standard_builders = [b['name'] for b in builders
                     if not b['category'].endswith('.exp')]
c['status'] = config.status.get_status_targets(standard_builders)

####### RESOURCE USAGE

# Number of build records to maintain per builder.
c['buildHorizon'] = 200

# Number of logs to maintain per builder.
c['logHorizon'] = 50

# Number of events (connect, disconnect, etc.) to maintain.
c['eventHorizon'] = 100

# Number of builds to cache in memory.
c['buildCacheSize'] = 200

# Use gzip instead of bz2, to reduce server load.
c['logCompressionMethod'] = 'gz'

####### SCHEDULERS

from buildbot.scheduler import Scheduler
c['schedulers'] = [Scheduler(name="all",branch=None,
                             treeStableTimer=2*60,
                             builderNames=standard_builders)]

####### PROJECT IDENTITY

c['title'] = "LLVM"
c['titleURL'] = "http://llvm.org/"
c['buildbotURL'] = "http://lab.llvm.org:8011/"

####### DB URL

c['db_url'] = "sqlite:///state.sqlite"
