# -*- python -*-

"""
Nightly Test UI instance for actual nightly test data.
"""

import sys
import time

import quixote
from quixote.directory import Directory
from quixote.errors import TraversalError

from lnt.db import runinfo
from lnt.db import perfdbsummary
from lnt.util import stats

import Util
from Util import safediv
from NTUtil import *

from PerfDB import Machine, Run, RunInfo, Test

class SimpleRunUI(Directory):
    _q_exports = ["", "graph"]

    def __init__(self, root, tag, idstr):
        self.root = root
        self.tag = tag
        try:
            self.id = int(idstr)
        except ValueError, exc:
            raise TraversalError(str(exc))
        self.popupDepth = 0

    def renderPopupBegin [html] (self, id, title, hidden):
        self.popupDepth += 1
        """\
        <p>
        <a href="javascript://" onclick="toggleLayer('%s')"; id="%s_">(%s) %s</a>
        <div id="%s" style="display: %s;" class="hideable_%d">
        """ % (id, id, ("+","-")[hidden], title, id, ("","none")[hidden],
               self.popupDepth)

    def renderPopupEnd [html] (self):
        """
        </div>"""
        self.popupDepth -= 1

    def getInfo(self, db):
        request = quixote.get_request()

        compareToID = request.form.get('compare', '')
        compareTo = None
        if compareToID:
            try:
                compareTo = db.getRun(int(compareToID))
            except:
                pass

        run = db.getRun(self.id)

        # Get the run summary which has run ordering information.
        run_summary = perfdbsummary.SimpleSuiteRunSummary.get_summary(db,
                                                                      self.tag)

        # Find previous run to compare to.
        if compareTo is None:
            id = run_summary.get_previous_run_on_machine(run.id)
            if id is not None:
                compareTo = db.getRun(id)

        return run, run_summary, compareTo

    def show_run_page [html] (self, db, run, run_summary, compare_to,
                              contents_fn):
        machine = run.machine

        """
        <center>
          <table>
            <tr>
              <td align=right>Machine:</td>
              <td>%s:%d</td>
            </tr>
            <tr>
              <td align=right>Run:</td>
              <td>%s (%s)</td>
            </tr>
        """ % (machine.name, machine.number, run.start_time,
               run.info['run_order'].value)
        if compare_to:
            """
            <tr>
              <td align=right>Compare To:</td>
              <td>%s (%s)</td>
            </tr>
            """ % (compare_to.start_time, compare_to.info['run_order'].value)
        """
          </table>
        </center>
        <p>
        """

        """
        <table width="100%%" border=1>
          <tr>
            <td valign="top" width="200">
              <a href="..">Homepage</a>
              <h4>Machine:</h4>
              <a href="../machines/%d/">%s:%d</a>
              <h4>Runs:</h4>
              <ul>
        """ % (machine.id, machine.name, machine.number)

        # Show a small number of neighboring runs.
        cur_id = run.id
        for i in range(3):
            id = run_summary.get_next_run_on_machine(cur_id)
            if not id:
                break
            cur_id = id
        for i in range(6):
            r = db.getRun(cur_id)
            if r == run:
                """ <li> <h3><a href="../%d/">%s</a></h3> """ % (r.id,
                                                                 r.start_time)
            else:
                """ <li> <a href="../%d/">%s</a> """ % (r.id, r.start_time)
            cur_id = run_summary.get_previous_run_on_machine(cur_id)
            if cur_id is None:
                break

        """
              </ul>
            </td>
            <td valign="top">
              <table border=1>
              <tr>
                <td> <b>Nickname</b> </td>
                <td> %s </td>
              </tr>
              <tr>
                <td> <b>Machine ID</b> </td>
                <td> %d </td>
              </tr>
              </table>""" %  (machine.name, machine.id)

        self.renderPopupBegin('machine_info', 'Machine Info', True)
        """
              <table border=1>"""
        info = machine.info.values()
        info.sort(key = lambda i: i.key)
        for mi in info:
            """
              <tr>
                <td> <b>%s</b> </td>
                <td>%s</td>
              </tr>
            """ % (mi.key, mi.value)
        """
              </table>"""
        self.renderPopupEnd()

        self.renderPopupBegin('run_info', 'Run Info', True)
        """
              <table border=1>"""
        info = run.info.values()
        info.sort(key = lambda i: i.key)
        for ri in info:
            """
              <tr>
                <td> <b>%s</b> </td>
                <td>%s</td>
              </tr>
            """ % (ri.key, ri.value)
        """
              </table>"""
        self.renderPopupEnd()

        contents_fn()

        """
            </td>
          </tr>
        </table>
        """

        self.root.getFooter()

    def _q_index [html] (self):
        # Get a DB connection.
        db = self.root.getDB()

        run,run_summary,compare_to = self.getInfo(db)
        machine = run.machine

        self.root.getHeader('Run Results', "../../..",
                            components=((self.tag,
                                         '%s/%s' % ('simple',self.tag)),
                                        ('machine',
                                         'simple/%s/machines/%d'%(self.tag,
                                                                  machine.id))),
                            addPopupJS=True, addFormCSS=True)

        self.show_run_page(db, run, run_summary, compare_to,
                           lambda: self._q_index_body(db, run, run_summary,
                                                      compare_to))

    def graph [html] (self):
        request = quixote.get_request()

        # Get a DB connection.
        db = self.root.getDB()

        run,run_summary,compare_to = self.getInfo(db)
        machine = run.machine

        # Load the test suite summary.
        ts_summary = perfdbsummary.get_simple_suite_summary(db, self.tag)

        # Load the form data.
        graph_tests = []
        graph_psets = []
        for name,value in request.form.items():
            if name.startswith(str('test.')):
                graph_tests.append(name[5:])
            elif name.startswith(str('pset.')):
                graph_psets.append(ts_summary.parameter_sets[int(name[5:])])

        # Get the test ids we want data for.
        test_ids = [ts_summary.test_map[(name,pset)].id
                     for name in graph_tests
                     for pset in graph_psets]

        # Load all the samples for those tests and this machine.
        q = db.session.query(Sample.run_id,Sample.test_id,
                             Sample.value).join(Run)
        q = q.filter(Run.machine_id == machine.id)
        q = q.filter(Sample.test_id.in_(test_ids))
        samples = list(q)

        # Aggregate by test id and then run key.
        #
        # FIXME: Pretty expensive.
        samples_by_test_id = {}
        for run_id,test_id,value in samples:
            d = samples_by_test_id.get(test_id)
            if d is None:
                d = samples_by_test_id[test_id] = Util.multidict()
            run_key = run_summary.get_run_order(run_id)
            if run_key is None:
                continue

            # FIXME: What to do on failure?
            run_key = int(run_key)
            d[run_key] = value

        # Build the graph data
        pset_id_map = dict([(pset,i)
                            for i,pset in enumerate(ts_summary.parameter_sets)])
        legend = []
        plot_points = []
        plots = ""
        num_plots = len(graph_tests) * len(graph_psets)
        num_points = 0
        index = 0
        show_mad_error = True
        show_points = True
        show_all_points = False
        for name in graph_tests:
            for pset in graph_psets:
                test_id = ts_summary.test_map[(name,pset)].id

                # Get the plot for this test.
                #
                # FIXME: Support order by something other than time.
                errorbar_data = []
                points_data = []
                data = []
                points = []
                for x,values in samples_by_test_id.get(test_id,{}).items():
                    min_value = min(values)
                    data.append((x, min_value))
                    if show_points:
                        if show_all_points:
                            for v in values:
                                points_data.append((x, v))
                        else:
                            points_data.append((x, min_value))
                    if show_mad_error:
                        med = stats.median(values)
                        mad = stats.median_absolute_deviation(values, med)
                        errorbar_data.append((x, med - mad, med + mad))
                        points.append((x, min_value, mad, med))
                data.sort()
                num_points += len(data)

                col = list(Util.makeDarkColor(float(index) / num_plots))
                pts = ','.join(['[%.4f,%.4f]' % (t,v)
                                for t,v in data])
                style = "new Graph2D_LinePlotStyle(1, %r)" % col
                plots += "    graph.addPlot([%s], %s);\n" % (pts,style)

                if points_data:
                    pts_col = (0,0,0)
                    pts = ','.join(['[%.4f,%.4f]' % (t,v)
                                    for t,v in points_data])
                    style = "new Graph2D_PointPlotStyle(1, %r)" % (pts_col,)
                    plots += "    graph.addPlot([%s], %s);\n" % (pts,style)

                if errorbar_data:
                    bar_col = [c*.7 for c in col]
                    pts = ','.join(['[%.4f,%.4f,%.4f]' % (x,y_min,y_max)
                                    for x,y_min,y_max in errorbar_data])
                    style = "new Graph2D_ErrorBarPlotStyle(1, %r)" % (bar_col,)
                    plots += "    graph.addPlot([%s], %s);\n" % (pts,style)

                legend.append(("%s : P%d" % (name, pset_id_map[pset]), col))
                points.sort()
                plot_points.append(points)
                index += 1

        def graph_body [html] ():
            """
            <h3>Graph</h3>
            <table>
            <tr>
            <td rowspan=2 valign="top">
              <canvas id="graph" width="600" height="400"></canvas>
            </td>
            <td valign="top">
            <table cellspacing=4 border=1>
            <tr><th colspan=2>Test</th></tr>
            """
            for name,col in legend:
                """
                <tr><td bgcolor="%02x%02x%02x">&nbsp;</td>
                <td>%s</td></tr>""" % (255*col[0], 255*col[1], 255*col[2], name)
            """
            </table>
            </td></tr>
            <tr><td align="right" valign="bottom">
            <font size="-2">
            Shift-Left Mouse: Pan<br>
            Alt/Meta-Left Mouse: Zoom<br>
            Wheel: Zoom (<i>Shift Slows</i>)<br>
            </font>
            </td></tr>
            </table>
            <p>
            <b>Plots</b>: %d<br>
            <b>Num Points<b>: %d<br>
            """ % (num_plots, num_points)

            """
            <h2>Deltas</h2>"""

            resample_list = set()
            new_sample_list = []
            for (name,col),points in zip(legend,plot_points):
                """
            <h3>%s</h3>""" % name
                """
            <table>
            <tr>
              <th colspan=2>Revision</th>
              <th> </th>
              <th colspan=2>Value</th>
              <th></th>
              <th></th>
              <th colspan=2>MAD</th>
              <th colspan=2>Med - Min</th>
            <tr>
              <th>Current</th>
              <th>Previous</th>
              <th>Delta (%)</th>
              <th>Current</th>
              <th>Previous</th>
              <th># Revs</th>
              <th> </th>
              <th>Current</th>
              <th>Previous</th>
              <th>Current</th>
              <th>Previous</th>
            </tr>"""
                points.sort()
                deltas = [(Util.safediv(p1[1], p0[1]), p0, p1)
                          for p0,p1 in Util.pairs(points)]
                deltas.sort()
                deltas.reverse()
                for (pct,(r0,t0,mad0,med0),(r1,t1,mad1,med1)) in deltas[:50]:
                    """
            <tr>
              <td><a href="http://llvm.org/viewvc/llvm-project?view=rev&revision=%d">%d</a></td>
              <td><a href="http://llvm.org/viewvc/llvm-project?view=rev&revision=%d">%d</a></td>
              %s
              <td>%.4f</td><td>%.4f</td>
              <td>%d</td>
              <td> </td>
              <td>%.4f</td><td>%.4f</td>
              <td>%.4f</td><td>%.4f</td>
            </tr>
                """ % (r1, r1, r0, r0, Util.PctCell(pct, delta=True).render(),
                       t1, t0, r1 - r0, mad1, mad0, med1-t1, med0-t0)

                    # Find the best next revision to sample, unless we have
                    # sampled to the limit. To conserve resources, we try to
                    # align to the largest "nice" revision boundary that we can,
                    # so that we tend to sample the same revisions, even as we
                    # drill down.
                    assert r0 < r1 and r0 != r1
                    if r0 + 1 != r1:
                        for align in [scale * boundary
                                      for scale in (100000,10000,1000,100,10,1)
                                      for boundary in (5, 1)]:
                            r = r0 + 1 + (r1 - r0)//2
                            r = (r // align) * align
                            if r0 < r < r1:
                                new_sample_list.append(r)
                                break

                    resample_list.add(r0)
                    resample_list.add(r1)
            """
            </table>"""

            """
            <h3>Revisions to Sample</h3>
            %s
            <p>
            <h3>Revisions to Resample</h3>
            %s
            <p>""" % (' '.join(map(str, new_sample_list)),
                      ' '.join(map(str, Util.sorted(resample_list))))

        # FIXME: Allow run_order to define this.
        xAxis_format = 'graph.xAxis.formats.normal'
        graph_init = """\
    function init() {
        graph = new Graph2D("graph");
        graph.clearColor = [1, 1, 1];
    %s
        graph.xAxis.format = %s;
        graph.draw();
    }
    """ % (plots,xAxis_format)
        self.root.getHeader('Run Results', "../../..",
                            components=((self.tag,
                                         '%s/%s' % ('simple',self.tag)),
                                        ('machine',
                                         'simple/%s/machines/%d' %(self.tag,
                                                                   machine.id)),
                                        ('run', 'simple/%s/%d' % (self.tag,
                                                                  run.id))),
                            addPopupJS=True, addGraphJS=True,
                            addJSScript=graph_init,
                            onload="init()")

        self.show_run_page(db, run, run_summary, compare_to, graph_body)

    def _q_index_body [html] (self, db, run, run_summary, compare_to):
        # Load the test suite summary.
        ts_summary = perfdbsummary.get_simple_suite_summary(db, self.tag)
        sri = runinfo.SimpleRunInfo(db, ts_summary)

        # Get the filtering form.
        form = quixote.form.Form(method=str("get"))
        form.add(quixote.form.CheckboxWidget, "show_delta",
                 title="Show Delta")
        form.add(quixote.form.CheckboxWidget, "show_stddev",
                 title="Show Standard Deviation")
        form.add(quixote.form.CheckboxWidget, "show_mad",
                 title="Show Median Absolute Deviation")
        form.add(quixote.form.CheckboxWidget, "show_all",
                 title="Show All Values")
        form.add(quixote.form.IntWidget, "num_comparison_runs",
                 title="Number of Comparison Runs")
        form.add_submit("submit", "Update")

        request = quixote.get_request()
        show_delta = bool(form['show_delta'])
        show_stddev =  bool(form['show_stddev'])
        show_mad = bool(form['show_mad'])
        show_all = bool(form['show_all'])
        try:
            num_comparison_runs = int(form['num_comparison_runs'])
        except:
            num_comparison_runs = 5

        self.renderPopupBegin('view_options', 'View Options', True)
        form.render()
        self.renderPopupEnd()

        # Gather the runs to use for statistical data.
        cur_id = run.id
        comparison_window = []
        for i in range(num_comparison_runs):
            cur_id = run_summary.get_previous_run_on_machine(cur_id)
            if not cur_id:
                break
            comparison_window.append(cur_id)

        # Render the page.
        def get_cell_value [html] (cr):
            test_status = cr.get_test_status()
            value_status = cr.get_value_status()

            run_cell_value = "-"
            if cr.current is not None:
                run_cell_value = "%.4f" % cr.current

            cell_color = None
            if test_status == runinfo.REGRESSED:
                cell_color = (233,128,128)
            elif test_status == runinfo.IMPROVED:
                cell_color = (143,223,95)
            elif test_status == runinfo.UNCHANGED_FAIL:
                cell_color = (255,195,67)

            if cell_color:
                """
                <td bgcolor="#%02x%02x%02x">%s</td""" % (
                    cell_color[0], cell_color[1], cell_color[2], run_cell_value)
            else:
                """
                <td>%s</td""" % (run_cell_value,)

            if show_all or value_status in (runinfo.REGRESSED,
                                            runinfo.IMPROVED):
                Util.PctCell(cr.pct_delta).render()
            else:
                """<td>-</td>"""

            if show_delta:
                if cr.delta is not None:
                    """<td>%.4f</td>""" % cr.delta
                else:
                    """<td>-</td>"""
            if show_stddev:
                if cr.stddev is not None:
                    """<td>%.4f</td>""" % cr.stddev
                else:
                    """<td>-</td>"""
            if show_mad:
                if cr.MAD is not None:
                    """<td>%.4f</td>""" % cr.MAD
                else:
                    """<td>-</td>"""

        """
        <h3>Parameter Sets</h3>
        <table border=1>
          <tr>
            <th rowspan=2>Name</th>
            <th colspan=%d>Parameters</th>
          </tr><tr>""" % len(ts_summary.parameter_sets)
        for key in ts_summary.parameter_keys:
            """
            <th>%s</th>""" % key
        """
          </tr>"""
        for (i,pset) in enumerate(ts_summary.parameter_sets):
            """
          <tr>
            <td>P%s</td>""" % (i,)
            pmap = dict(pset)
            for key in ts_summary.parameter_keys:
                item = pmap.get(key)
                if item is None:
                    item = "-"
                """
            <td>%s</td>""" % item
            """
          </tr>"""
        """
        </table>"""

        """
        <h3>Tests</h3>"""

        pset_cols = 2 + show_delta + show_stddev + show_mad
        """
        <form method="GET" action="graph">
        <table class="sortable" border=1>
        <thead>
          <tr>
            <th rowspan="1"></th><th rowspan="1">Name</th>"""
        for i in range(len(ts_summary.parameter_sets)):
            """<th colspan=%d>P%d</th>
            """ % (pset_cols, i)
        """
          </tr><tr><th></th><th></th>"""
        for i in range(len(ts_summary.parameter_sets)):
            """
            <th><input type="checkbox" name="pset.%d"></th>
            <th>%%</th>""" % i
            if show_delta:
                """
            <th>&Delta;</th>"""
            if show_stddev:
                """
            <th>&sigma;</th>"""
            if show_mad:
                """
            <th>MAD</th>"""
        """
          </tr>
        </thead>"""
        for name in ts_summary.test_names:
            """
          <tr>
            <td><input type="checkbox" name="test.%s"></td>
            <td>%s</td>""" % (name, name)
            for pset in ts_summary.parameter_sets:
                cr = sri.get_run_comparison_result(run, compare_to, name, pset,
                                                   comparison_window)
                get_cell_value(cr)
            """
          </tr>"""
        """
        </table>
        <input type="submit" value="Graph">
        </form>"""

class MachineUI(Directory):
    _q_exports = [""]

    def __init__(self, root, parent, idstr):
        self.root = root
        self.parent = parent
        try:
            self.id = int(idstr)
        except ValueError, exc:
            raise TraversalError(str(exc))
        self.popupDepth = 0

    def renderPopupBegin [html] (self, id, title, hidden):
        self.popupDepth += 1
        """\
        <p>
        <a href="javascript://" onclick="toggleLayer('%s')"; id="%s_">(%s) %s</a>
        <div id="%s" style="display: %s;" class="hideable_%d">
        """ % (id, id, ("+","-")[hidden], title, id, ("","none")[hidden],
               self.popupDepth)

    def renderPopupEnd [html] (self):
        """
        </div>"""
        self.popupDepth -= 1

    def _q_index [html] (self):
        # Get a DB connection.
        db = self.root.getDB()

        machine = db.getMachine(self.id)

        self.root.getHeader("Machine: %s:%d" % (machine.name,machine.number),
                            "%s/../.." % self.parent.root_path,
                            components=self.parent.components,
                            addPopupJS=True)

        # Get the run summary which has run ordering information.
        run_summary = perfdbsummary.SimpleSuiteRunSummary.get_summary(
            db, self.parent.tag)

        """
        <table width="100%%" border=1>
          <tr>
            <td valign="top" width="200">
              <a href="../..">Homepage</a>
              <h4>Relatives:</h4>
              <ul>
        """
        # List all machines with this name.
        for m in db.machines(name=machine.name):
            """<li><a href="../%d">%s:%d</a></li>""" % (m.id, m.name, m.number)
        """
              </ul>
            </td>
            <td valign="top">
              <table border=1>
              <tr>
                <td> <b>Nickname</b> </td>
                <td> %s </td>
              </tr>
              <tr>
                <td> <b>Machine ID</b> </td>
                <td> %d </td>
              </tr>
              </table>""" % (machine.name, machine.id)
        self.renderPopupBegin('machine_info', 'Machine Info', True)
        """
              <table border=1>"""
        info = machine.info.values()
        info.sort(key = lambda i: i.key)
        for mi in info:
            """
              <tr>
                <td> <b>%s</b> </td>
                <td>%s</td>
              </tr>""" % (mi.key, mi.value)
        """
              </table>"""
        self.renderPopupEnd()

        # List associated runs.
        run_info = db.session.query(Run.id, Run.start_time, Run.end_time).\
            filter(Run.machine_id == machine.id).\
            filter(Run.id.in_(run_summary.runs_in_order)).all()
        run_info_map = dict((id,(start_time,end_time))
                            for id,start_time,end_time in run_info)
        """
        <p>
        <table class="sortable" border=1>
        <thead>
          <tr>
            <th>Run Order</th>
            <th>Start Time</th>
            <th>End Time</th>
            <th>&nbsp;</th>
          </tr>
        </thead>
        """
        for order in run_summary.run_orders:
            run_ids = [id for id in run_summary.runs_by_order[order]
                       if id in run_info_map]
            if not run_ids:
                continue

            """
          <tr>
            <td rowspan="%d" align=right>%s</td>""" % (len(run_ids), order)
            for run_id in run_ids:
                start_time,end_time = run_info_map[run_id]
                if run_id != run_ids[0]:
                    """<tr>"""
                """
            <td>%s</td>
            <td>%s</td>
            <td><a href="../../%d">View Results</a></td>
          </tr>""" % (start_time, end_time, run_id)
        """
        </table>"""

        """
            </td>
          </tr>
        </table>"""

        self.root.getFooter()

class MachinesDirectory(Directory):
    _q_exports = [""]

    def __init__(self, parent):
        Directory.__init__(self)
        self.parent = parent

    def _q_index [plain] (self):
        """
        machine access
        """

    def _q_lookup(self, component):
        return MachineUI(self.parent.root, self.parent, component)


class TagRootDirectory(Directory):
    _q_exports = [""]

    def __init__(self, root, tag):
        Directory.__init__(self)
        self.tag = tag
        self.root = root
        self.root_path = '../..'
        self.components = ((self.tag, '%s/%s' % ('simple',self.tag)),)

    def getTags(self):
        return (self.tag,)

    def _q_index [plain] (self):
        # Get a DB connection
        db = self.root.getDB()

        self.root.getHeader('Overview', self.root_path, self.components)

        # Find recent runs.
        """
        <center><h3>Submission Overview</h3></center>
        <table width="100%%">
          <tr>
            <td valign="top" width="50%">
              <center>
              <h3>Test Machines</h3>
              <table class="sortable" border=1>
                <thead>
                <tr>
                  <th>Latest Submission</th>
                  <th>Machine</th>
                  <th>Results</th>
                </tr>
                </thead>
        """

        # Show the most recent entry for each machine.
        q = db.session.query(Machine.name).distinct().order_by(Machine.name)
        for name, in q:
            # Get the most recent run for this machine name.
            q = db.session.query(Run).join(Machine).filter(Machine.name == name)
            r = q.order_by(Run.start_time.desc()).first()

            # Limit by matching tags.
            if 'tag' in r.info:
                tag = r.info['tag'].value
            else:
                tag = None
            if tag not in self.getTags():
                continue

            """
              <tr>
                <td>%s</td>
                <td align=left><a href="machines/%d/">%s:%d</a></td>
                <td><a href="%d/">View Results</a></td>
              </tr>
            """ % (r.start_time, r.machine.id, r.machine.name,
                   r.machine.number, r.id)

        """
              </table>
              </center>
            </td>
            <td valign="top">
              <center>
              <h3>Recent Submissions</h3>
              <table class="sortable" border=1>
                <thead>
                <tr>
                  <th>Run Order</th>
                  <th>Start Time</th>
                  <th>End Time</th>
                  <th>Machine</th>
                  <th>Results</th>
                </tr>
                </thead>
        """

        # Show the 20 most recent submissions, ordered by time.
        for r in db.session.query(Run).order_by(Run.start_time.desc())[:20]:
            # Limit by matching tags.
            if 'tag' not in r.info or 'run_order' not in r.info:
                continue
            if tag not in self.getTags():
                continue

            m = r.machine
            """
              <tr>
                <td>%s</td>
                <td>%s</td>
                <td>%s</td>
                <td align=left><a href="machines/%d/">%s:%d</a></td>
                <td><a href="%d/">View Results</a></td>
              </tr>
            """ % (r.info['run_order'].value, r.start_time, r.end_time, m.id,
                   m.name, m.number, r.id)

        """
              </table>
              </center>
            </td>
          </tr>
        </table>
        """

        self.root.getFooter()

    def _q_lookup(self, component):
        if component == 'machines':
            return MachinesDirectory(self)
        return SimpleRunUI(self.root, self.tag, component)

class RootDirectory(Directory):
    def __init__(self, root):
        Directory.__init__(self)
        self.root = root

    def _q_lookup(self, component):
        return TagRootDirectory(self.root, component)
