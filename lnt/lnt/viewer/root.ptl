# -*- python -*-

"""
Root LNT webapp UI.
"""

import os
import re
import time

import quixote
import quixote.form
import quixote.form.css
import quixote.errors
from quixote import get_response
from quixote.directory import Directory, Resolving
from quixote.util import StaticDirectory

import PerfDB, Util
from PerfDB import Machine, Run

class RootDirectory(Resolving, Directory):
    _q_exports = ["", "resources", "js", "machines", "runs", "tests",
                  "browse", "submitRun", "nightlytest", "simple", "zview",

                  # Redirections.
                  "select_db",

                  ("favicon.ico", "favicon_ico")]

    def __init__(self, config, dbName='default', dbInfo=None, pathToRoot="./"):
        self.config = config
        self.dbName = dbName
        self.dbInfo = dbInfo
        if self.dbInfo is None:
            self.dbInfo = config.databases[dbName]
        self.pathToRoot = pathToRoot

    def getDB(self):
        db = PerfDB.PerfDB(self.dbInfo.path)

        # Enable SQL logging with db_log.
        #
        # FIXME: Conditionalize on an is_production variable.
        request = quixote.get_request()
        if request.form.get('db_log'):
            import logging, StringIO
            request.db_log = StringIO.StringIO()
            logger = logging.getLogger("sqlalchemy")
            logger.addHandler(logging.StreamHandler(request.db_log))
            db.engine.echo = True

        return db

    def getHeader [html] (self, title, pathToRoot, components=None,
                          addSorttableJS=True,
                          addFormCSS=False,
                          addPopupJS=False,
                          addGraphJS=False,
                          addJSScript=None,
                          onload=None):
        pathToRoot = os.path.join(self.pathToRoot,
                                  pathToRoot)

        """
        <html>
        <head>
        """
        if addSorttableJS:
            """
        <script src="%s/resources/sorttable.js"></script>
            """ % (pathToRoot,)
        if addPopupJS:
            """
        <script src="%s/resources/popup.js"></script>
            """ % (pathToRoot,)
        if addGraphJS:
            """
        <script src="%s/resources/mootools-1.2.4-core-nc.js"></script>
        <script src="%s/js/View2D.js"></script>
            """ % (pathToRoot,pathToRoot)
        if addJSScript:
            """\
<script type="text/javascript">
%s
</script>
""" % (addJSScript,)

        if components:
            component_title = ' : %s' %(
                ' : '.join(short_name for short_name,_ in components))
        else:
            component_title = ''
        """
        <link rel="stylesheet" href="%s/resources/style.css" type="text/css" />
        """ % (pathToRoot,)
        if addFormCSS:
            """
        <link rel="stylesheet" href="%s/resources/form.css" type="text/css" />
            """ % (pathToRoot,)
        """
        <link rel="icon" type="image/png" href="%s/favicon.ico">
        <title>%s%s - %s</title>
        </head>
        """ % (pathToRoot, self.config.name, component_title, title)

        """\
        <body"""
        if onload:
            """ onload="%s">""" % (onload,)
        else:
            """>"""

        # Database selection header.
        """\
        <div class="zorg_navheader">
        <form method="get" action="%s/select_db">
        <table style="padding:0.1em;" width="100%%">
        <tr>
          <td>
          <strong>
          [%s]
          </strong>
          </td>
          <td style="text-align:right;">
          <strong>Database:</strong>
          <select name="db" onchange="submit()">
        """ % (pathToRoot, self.dbName)
        for name in self.config.databases.keys():
            """\
            <option %s>%s</option>
            """ % (('', 'selected')[name == self.dbName],
                   name)
        """\
          </select>
          <input type="submit" value="Go" />
          </td>
        </tr>
        </table>
        </form>
        </div>
        """

        if components is not None:
            """<h2><a href="%s">%s</a>""" % (pathToRoot, self.config.name)
            for short_name,path in components:
                """ : <a href="%s/db_%s/%s">%s</a>""" % (pathToRoot,self.dbName,
                                                         path,short_name)
            """ - %s</h2>""" % title

    def getFooter [html] (self):
        db_log = getattr(quixote.get_request(), str('db_log'), None)
        if db_log:
            """<hr><h3>SQL Log</h3><pre>%s</pre>""" % db_log.getvalue()

        current = time.time()
        """
        <hr>
        Server Started: %s<br>
        Generated: %s<br>
        Render Time: %.2fs<br>
        </body>
        </html>
        """ % (time.strftime(str('%Y-%m-%dT%H:%M:%Sz'),
                             time.localtime(quixote.get_publisher().create_time)),
               time.strftime(str('%Y-%m-%dT%H:%M:%Sz'),
                             time.localtime(current)),
               current - quixote.get_request().start_time)

    def _q_index [html] (self):
        self.getHeader("Overview", ".",
                       components=(),)

        # Available UIs.

        if self.dbInfo.showSimple:
            """
            <a href="simple/">Simple Test Viewer</a>
            """

        if self.dbInfo.showNightlytest:
            """
            <h3>Nightly Test Results</h3>
            <a href="nightlytest/">Nightly Test</a>
            """

        if self.dbInfo.showGeneral:
            """
            <hr>

            <h3>General Database Access</h3>
            <p><a href="browse">Browse DB</a>
            <p><a href="submitRun">Submit Run</a>
            """

        self.getFooter()

    def browse [html] (self):
        # Get a DB connection.
        db = self.getDB()

        self.getHeader("Database Browser", ".", components=(),
                       addSorttableJS=False)

        # List machines.
        """
        <h3>Machines</h3>
        <table class="sortable" border=1 cellborder=1>
          <thead>
          <tr>
            <th>Name</th>
          </tr>
          </thead>
        """
        for m in db.machines():
            """
          <tr>
            <td><a href="machines/%d/">%s:%d</a></td>
          </tr>
            """ % (m.id, m.name, m.number)
        """
        </table>
        """

        # List runs.
        """
        <h3>Run List</h3>
        <table class="sortable" border=1 cellborder=1>
          <thead>
          <tr>
            <th>ID</th>
            <th>Machine</th>
            <th>Start Time</th>
            <th>End Time</th>
          </tr>
          </thead>
        """
        for r,m in db.session.query(Run,Machine).join(Machine):
            """
          <tr>
            <td><a href="runs/%d/">%d</a></td>
            <td><a href="machines/%d/">%s:%d</a></td>
            <td>%s</td>
            <td>%s</td>
          </tr>
            """ % (r.id, r.id,
                   r.machine_id, m.name, m.number,
                   r.start_time, r.end_time)
        """
        </table>
        """


        # List tests.
        """
        <h3>Test List</h3>
        <table class="sortable" border=1 cellborder=1>
          <thead>
          <tr>
            <th>ID</th>
            <th>Test</th>
          </tr>
          </thead>
        """
        for t in db.tests():
            """
          <tr>
            <td><a href="tests/%d/">%d</a></td>
            <td>%s</td>
          </tr>
            """ % (t.id, t.id, t.name)
        """
        </table>
        """

        self.getFooter()

    def submitRun(self):
        form = quixote.form.Form(enctype="multipart/form-data")
        form.add(quixote.form.FileWidget, "file",
                 title="Input File (plist)")
        form.add(quixote.form.TextWidget, "input_data",
                 title="Input Data (plist)")
        form.add(quixote.form.SingleSelectWidget, "commit",
                 title="Commit", value="0",
                 options=["0", "1"], required=True)
        form.add_submit("submit", "Submit")

        def render [html] ():
            self.getHeader("Submit Run", ".", components=(), addFormCSS=1)
            form.render()
            self.getFooter()

        def result [plain] (success, run, log):
            """\
STATUS: %d

OUTPUT:
%s
""" % (not run, log.getvalue())

        if not form.is_submitted() or form.has_errors():
            return render()

        import plistlib
        import tempfile
        from lnt.util import ImportData
        from StringIO import StringIO

        commit = int(form.get_widget('commit').parse())

        # Get the input data.
        input_file = form.get_widget('file')
        file_value = input_file.parse()

        input_data = form.get_widget('input_data')
        data_value = input_data.parse()

        if ((file_value is None and data_value is None) or
            (file_value is not None and data_value is not None)):
            raise quixote.errors.QueryError(
                   "Must supply either an input file or input text data")

        if file_value is not None:
            data_value = file_value.fp.read()
            file_value.fp.close()

        # Stash a copy of the raw submission.
        prefix = time.strftime("data-%Y-%m-%d_%H-%M-%S")
        fd,path = tempfile.mkstemp(prefix=prefix,
                                   suffix='.plist',
                                   dir=self.config.tempDir)
        os.write(fd, data_value)
        os.close(fd)

        # Get a DB connection.
        db = self.getDB()

        # Import the data.
        #
        # FIXME: Gracefully handle formats failures and DOS attempts. We
        # should at least reject overly large inputs.
        log = StringIO()
        success, run = ImportData.import_and_report(
            self.config, self.dbName, db, path, log, '<auto>', commit)

        return result(success, run, log)

    def favicon_ico(self):
        response = get_response()
        response.set_content_type("image/x-icon")
        response.set_expires(days=1)
        return FAVICON

    def _q_resolve(self, component):
        if component == 'machines':
            import machines
            return machines.MachinesDirectory(self)
        if component == 'runs':
            import runs
            return runs.RunsDirectory(self)
        if component == 'tests':
            import tests
            return tests.TestsDirectory(self)
        if component == 'nightlytest':
            import nightlytest
            return nightlytest.NightlyTestDirectory(self)
        if component == 'simple':
            import simple
            return simple.RootDirectory(self)
        if component == 'zview':
            from zview import zviewui
            return zviewui.ZViewUI(self)

    def _q_lookup(self, component):
        if component.startswith('db_'):
            dbName = component[3:]
            dbInfo = self.config.databases.get(dbName)
            if dbInfo:
                return RootDirectory(self.config, dbName, dbInfo, "../")

    def select_db(self):
        request = quixote.get_request()
        dbName = request.form.get('db')
        return quixote.redirect("db_%s/" % (dbName,))

    resources = StaticDirectory(os.path.join(os.path.dirname(__file__),
                                             'resources'),
                                list_directory=True)
    js = StaticDirectory(os.path.join(os.path.dirname(__file__), 'js'),
                         list_directory=True)

FAVICON = """\
AAABAAEAEBAAAAAAAABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEA
AAAAAAD///8AAAD/ALOz/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgEAAAAAAAAAAAAAAAAAAgECAQIAAAAAAAAAAAAAAAEA
AAIBAQIAAAACAQIAAAECAAAAAAIBAQICAQIBAgECAAAAAAAAAAIBAQIAAAECAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""".decode('base64')
