#!/usr/bin/env python

import os
import time
import sys
sys.path.append(os.path.join(os.path.dirname(__file__),'../'))
import viewer
from viewer import Util
from viewer import PerfDB

def main():
    global opts
    from optparse import OptionParser
    parser = OptionParser("usage: %prog file dbpath")
    parser.add_option("", "--test-prefix",
                      action="store", dest="testPrefix", default=None)
    opts,args = parser.parse_args()

    if len(args) != 2:
        parser.error("incorrect number of argments")
    if not opts.testPrefix:
        parser.error("must specify test prefix")

    dbpath,file = args

    globals = {}
    exec open(file) in globals, globals

    db = PerfDB.PerfDB(dbpath)

    numMachines = db.getNumMachines()
    numTests = db.getNumTests()
    numSamples = db.getNumSamples()

    # Hardcode some things that aren't in the file
    machine = PerfDB.Machine(-1,
                             name = 'lordcrumb.apple.com',
                             arch = 'Intel i386',
                             os = 'SnowLeopard',
                             hwconfig = '<unknown>',
                             compiler = '<unknown>')
    machine = db.getOrCreateMachine(machine)
    print "MACHINE: %r" % machine

    # Treat as a single "run"; our DB format has no way to lock
    # individual samples together. I recall now that this was the
    # motivation in treating a sample as a group of numbers, not just
    # one.

    # Rough guess.
    mtime = os.stat(file).st_mtime
    timestamp = time.strftime('%Y-%m-%dT%H:%M:%Sz', time.localtime(mtime))

    # FIXME: Need to extract revision. :(
    run = db.createRun(machine, PerfDB.Run(-1, -1, timestamp=timestamp, svnRevision=None))
    print "RUN: %r" % run

    ####

    runs = globals.get('runs')
    for keys,data in runs:
        # Mangle a test name
        testName = '%s:threads=%s:pch=%s:mode=%s' % (opts.testPrefix,
                                                     keys.get('threads'),
                                                     int(keys.get('pch') == 'pch'),
                                                     keys.get('script'))
        compiler = keys.get('cc')
        compiler = compiler.replace('clang_driver','clang')
        compiler = compiler.replace('_','/')
        compiler = compiler.replace('xcc','ccc')
        compilerOpts = '-O0,-g'

        userTest = db.getOrCreateTest(PerfDB.Test(-1,
                                                  name = testName,
                                                  subtest = 'user',
                                                  kindID = None,
                                                  groupID = None,
                                                  compiler = compiler,
                                                  compilerOpts = compilerOpts))
        sysTest = db.getOrCreateTest(PerfDB.Test(-1,
                                                  name = testName,
                                                  subtest = 'sys',
                                                  kindID = None,
                                                  groupID = None,
                                                  compiler = compiler,
                                                  compilerOpts = compilerOpts))
        wallTest = db.getOrCreateTest(PerfDB.Test(-1,
                                                  name = testName,
                                                  subtest = 'wall',
                                                  kindID = None,
                                                  groupID = None,
                                                  compiler = compiler,
                                                  compilerOpts = compilerOpts))
        assert data['version'] == 0
        for (mem,user,sys,wall) in data['samples']:
            db.addSample(userTest, run, PerfDB.Sample(-1, -1, -1, '', user))
            db.addSample(sysTest, run, PerfDB.Sample(-1, -1, -1, '', sys))
            db.addSample(wallTest, run, PerfDB.Sample(-1, -1, -1, '', wall))

    db.commit()

    print "ADDED: %d machines, %d tests, and %d samples." % (db.getNumMachines() - numMachines,
                                                             db.getNumTests() - numTests,
                                                             db.getNumSamples() - numSamples)

if __name__ == '__main__':
    main()
