#!/usr/bin/env python

"""
Generic script for importing LNT test data into a database.
"""

# FIXME: Roll this into lnttool and kill.

import os
import plistlib
import sys
import time

from lnt import formats, viewer
from lnt.viewer import Util, PerfDB
from lnt.util import NTEmailReport

def main():
    global opts
    from optparse import OptionParser
    parser = OptionParser("usage: %prog dbpath files+")
    parser.add_option("", "--email-on-import", dest="emailOnImport", type=int,
                      default=False)
    parser.add_option("", "--email-base-url", dest="emailReportURL", type=str,
                      default=None)
    parser.add_option("", "--email-host", dest="emailReportHost", type=str,
                      default=None)
    parser.add_option("", "--email-from", dest="emailReportFrom", type=str,
                      default=None)
    parser.add_option("", "--email-to", dest="emailReportTo", type=str,
                      default=None)
    parser.add_option("", "--format", dest="format",
                      choices=formats.format_names + ['<auto>'],
                      default='<auto>')
    parser.add_option("", "--commit", dest="commit", type=int,
                      default=True)
    parser.add_option("", "--show-sql", dest="showSQL", action="store_true",
                      default=False)
    parser.add_option("", "--show-sample-count", dest="showSampleCount",
                      action="store_true", default=False)
    parser.add_option("", "--always-email", dest="alwaysEmail",
                      action="store_true", default=False)
    opts,args = parser.parse_args()

    if len(args) < 2:
        parser.error("incorrect number of argments")

    dbpath = args[0]

    startTime = time.time()
    db = PerfDB.PerfDB(dbpath, echo=opts.showSQL)
    importFiles(db, args[1:])
    if opts.commit:
        print 'COMMITTING RESULT:',
        db.commit()
        print 'DONE'
    else:
        print 'DISCARDING RESULT:',
        db.rollback()
        print 'DONE'
    print 'TOTAL IMPORT TIME: %.2fs' % (time.time() - startTime,)

def importFiles(db, files):
    def consumer(file):
        try:
            return formats.read_any(file, opts.format)
        except KeyboardInterrupt:
            raise
        except:
            print 'ERROR: %r: import failed' % file
            import traceback
            traceback.print_exc()
            return None

    numMachines = db.getNumMachines()
    numRuns = db.getNumRuns()
    numTests = db.getNumTests()

    # If the database gets fragmented, count(*) in SQLite can get really slow!?!
    if opts.showSampleCount:
        numSamples = db.getNumSamples()

    for file in files:
        print 'IMPORT: %s' % file
        startTime = time.time()
        data = consumer(file)
        print '  LOAD TIME: %.2fs' % (time.time() - startTime,)
        if data is None:
            continue

        startTime = time.time()
        success,(machine,run) = PerfDB.importDataFromDict(db, data)
        print '  IMPORT TIME: %.2fs' % (time.time() - startTime,)
        if not success:
            print "  IGNORING DUPLICATE RUN"
            print "    MACHINE: %d" % (run.machine_id, )
            print "    START  : %s" % (run.start_time, )
            print "    END    : %s" % (run.end_time, )
            for ri in run.info.values():
                print "    INFO   : %r = %r" % (ri.key, ri.value)

        if opts.emailOnImport and (success or opts.alwaysEmail):
            print "\nMAILING RESULTS TO: %r\n" % opts.emailReportTo
            NTEmailReport.emailReport(db, run,
                                      opts.emailReportURL,
                                      opts.emailReportHost,
                                      opts.emailReportFrom,
                                      opts.emailReportTo,
                                      success,
                                      opts.commit)

    print "ADDED: %d machines" % (db.getNumMachines() - numMachines,)
    print "ADDED: %d runs" % (db.getNumRuns() - numRuns,)
    print "ADDED: %d tests" % (db.getNumTests() - numTests,)
    if opts.showSampleCount:
        print "ADDED: %d samples" % (db.getNumSamples() - numSamples)

if __name__ == '__main__':
    main()
